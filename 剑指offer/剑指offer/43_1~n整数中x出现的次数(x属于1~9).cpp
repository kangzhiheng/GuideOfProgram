//-----------------------------------------------------------------------------
// 文 件 名: 43_1~n整数中x出现的次数(x属于1~9).cpp
// 作    者：adoredee
// 创建时间： 2019.06.26
// 描    述：43_1~n整数中x出现的次数(x属于1~9)
// 版    本：
//-----------------------------------------------------------------------------

// 面试题43：从1到n整数中x出现的次数(x属于1~9)
// 题目：x属于1~9，输入一个整数n，求从1到n这n个整数的十进制表示中x出现的次数。例如
//      输入12，从1到12这些整数中包含1的数字有1，10，11和12，1一共出现了5次。

/*
	先这么定义一个数，一个数可以被分为高位，当前位和低位；
	再定义i，i = 1, 2, 3, 4……，依次表示个位，十位，百位，千位……
	此时有一个数 1236，i=2表示当前位指向十位，则此时的高位数字为12，低位为6，当前位为3
	统计这个数有多少个x，x属于1~9，从个位开始诸位累加，
	1. 1~10的个位数，任意x出现1次；
	2. 1~100的十位数，任意x出现10次；
	3. 1~1000的百位数。任意x出现100次，
	依此类推
	在 1~10^(i) 的数中，他们的左数第二位,或右数第i位(从1算起)中，任意x出现了10^(i-1)次。

	举例：
	以 n=2593, x=5 为例来解释如何得到数学公式。
	从 1 至 2593 中，数字 5 总计出现了 813 次，其中有 259 次出现在个位，260 次出现在十位，294 次出现在百位，0 次出现在千位。
	现在依次分析这些数据.
	1. 计算个位，i = 1，高位为259，当前位3，低位0。从 1 至 2590 中，2593 / 10 = 259，包含了 259 个 10，因此任意的 x 都出现了 259 x 1 次
	   最后剩余的三个数 2591, 2592 和 2593，当前位为 3 < X，因此不会包含任何 5。
	2. 计算十位, i = 10，高位为25，当前位9，低位3。从 1 至 2500 中，2593 / 100 = 25，包含了 25 个 100，因此任意的 x 都出现了 25 × 10 = 250 次
	   剩下的数字是从 2501 至 2593，当前位为 9 > X，因此会包含全部 10 个 5，最后总计 250 + 10 = 260。
	3. 计算百位, i = 100，高位为2，当前位5，低位93。从 1 至 2000 中，包含了 2 个 1000，因此任意的 x 都出现了 2 × 100 = 200 次
	   剩下的数字是从 2001 至 2593，当前位为 5 等于 x，它们的百位肯定是包含 5 的，但不会包含全部 100 个, 
	   是从 2500 至 2593，共 93 + 1 = 94，最后总计 200 + 94 = 294。
	4. 计算千位。现在已经没有更高位，因此直接看最大的千位数字 2 < X，所以不会包含任何 5。
	到此为止，已经计算出全部数字 5 的出现次数。

	总结规律：
	计算第i位包含x的个数时，分别设此时的高位为a, 当前位为b, 低位为c, x出现的次数为counts, 两步走：
	1. 计算基础值，高位 a * 10^(i -1), counts = a * 10^(i - 1);
	2. 比较当前位 b 与 x 的大小：
	   (1) b > x, counts = a * 10^(i -1) + 10^（i - 1）;
	   (2) b == x, counts = a * 10^(i -1) + (c + 1)
	   (3) b < x, counts = a * 10^(i -1) + 0
	a, b, c的计算公式:
	设这个数为n, i表示当前位, i = 1, 2, 3, 4……，依次表示个位，十位，百位，千位……
	高位：a = n / 10^i
	当前位：b = n % 10^i / 10^(i-1)
	低位：c = n % 10^i - b x 10^(i-1)
*/

#include <iostream>
#include <math.h>

using namespace std;

// 上述说明的做法
size_t NumberOfXBetween1ToN(size_t n, size_t x)    // n表示整数，x表示1~9中的某个数
{
	// 异常判断
	if (n <= 0 || x <= 0)
	{
		return 0;
	}

	int counts = 0;    // 计数

	// i表示当前位, i = 1, 2, 3, 4……，依次表示个位，十位，百位，千位……
	for (size_t i = 1; pow(10, i - 1) <= n; ++i)
	{
		int base = int(pow(10, i));      
		int a = n / base;                              // 高位
		int b = n % base / int(pow(10, i - 1));        // 当前位
		int c = n % base - b * int(pow(10, i - 1));    // 低位

		counts += a * int(pow(10, i - 1));        // 基础值

		// 当前位与x的比较
		if (b > x)    
			counts += int(pow(10, i - 1));
		else if (b == x)
			counts += (c + 1);
	}
	return counts;
}

// 另一种做法
int count(int n, int x) 
{
	int cnt = 0, k;
	for (int i = 1; k = n / i; i *= 10)
	{
		// k / 10 为高位的数字。
		cnt += (k / 10) * i;
		// 当前位的数字。
		int cur = k % 10;
		if (cur > x) 
		{
			cnt += i;
		}
		else if (cur == x) 
		{
			// n - k * i 为低位的数字。
			cnt += n - k * i + 1;
		}
	}
	return cnt;
}

int main()
{
	cout << "请输入一个整数：";
	int val;
	cin >> val;

	cout << "请输入1~9中的某个数字：";
	int x;
	cin >> x;

	cout << "在1~" << val << "的整数中" << x << "一共出现了" << NumberOfXBetween1ToN(val, x) << "次。" << endl;

	// int a = count(val, x);
	// cout << a;

	return 0;
}
