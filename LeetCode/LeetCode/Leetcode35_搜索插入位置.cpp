//-----------------------------------------------------------------------------
// 作    者：adoredee
// 创建时间：2019.04.22
// 描    述：搜索插入位置
//-----------------------------------------------------------------------------
/*
    给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
	你可以假设数组中无重复元素。

    示例 1:
    
    输入: [1,3,5,6], 5
    输出: 2
    示例 2:
    
    输入: [1,3,5,6], 2
    输出: 1
    示例 3:
    
    输入: [1,3,5,6], 7
    输出: 4
    示例 4:
    
    输入: [1,3,5,6], 0
    输出: 0
*/
#include <iostream>
#include <vector>

using namespace std;

int searchInsert(vector<int>& nums, int target)
{
	if (nums.empty() || nums.front() > target)  // 数组为空,插入目标值，索引值为0
		return 0;
	if (nums.back() < target)
		return nums.size();

	int left = 0;
	int right = nums.size() - 1;
	int mid = 0;

	while (left <= right)
	{
		mid = left + (right - left) / 2;

		if (nums[mid] == target)
			return mid;
		if (target < nums[mid])
			right = mid - 1;
		else if (target > nums[mid])
			left = mid + 1;

	}
	return nums[mid] > target ? mid : mid + 1;

}
int main()
{
	vector<int> arr = { 1, 3, 5, 7 };
	int target = 2;

	int mid = searchInsert(arr, target);

	cout << mid << endl;

	return 0;
}